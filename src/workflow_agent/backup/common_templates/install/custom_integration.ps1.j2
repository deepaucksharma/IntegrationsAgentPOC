# Custom Integration Installation Script for Windows
# Generated by New Relic Integration Agent

# Import common functions
{% include 'macros/common.ps1.j2' %}

{{ log_message('INFO', 'Starting installation of custom integration') }}

# Set error handling
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

# Verify prerequisites
{{ log_message('INFO', 'Verifying prerequisites...') }}
try {
    if (-not (Get-Command curl -ErrorAction SilentlyContinue)) {
        {{ handle_error('Required tool not found: curl') }}
    }
} catch {
    {{ handle_error('Error checking for required tool: curl') }}
}

# Create installation directory
$installDir = "C:\Program Files\Custom Integration"
if (-not (Test-Path $installDir)) {
    {{ log_message('INFO', 'Creating installation directory...') }}
    New-Item -ItemType Directory -Path $installDir -Force | Out-Null
}

# Download integration
{{ log_message('INFO', 'Downloading custom integration...') }}
$integrationUrl = "{{ parameters.integration_url }}"
$installerPath = "$env:TEMP\custom-integration.zip"
try {
    Invoke-WebRequest -Uri $integrationUrl -OutFile $installerPath
} catch {
    {{ handle_error('Failed to download integration: $_') }}
}

# Extract integration
{{ log_message('INFO', 'Extracting integration...') }}
try {
    Expand-Archive -Path $installerPath -DestinationPath $installDir -Force
} catch {
    {{ handle_error('Failed to extract integration: $_') }}
}

# Configure integration
{{ log_message('INFO', 'Configuring integration...') }}
$configDir = "{{ parameters.config_path }}"
if (-not (Test-Path $configDir)) {
    New-Item -ItemType Directory -Path $configDir -Force | Out-Null
}

$configContent = @"
integration_name: custom-integration
version: {{ template_data.version }}
settings:
  enabled: true
  log_level: info
"@

try {
    $configContent | Out-File -FilePath "$configDir\custom-integration-config.yml" -Encoding UTF8
} catch {
    {{ handle_error('Failed to create config file: $_') }}
}

# Create Windows service
{{ log_message('INFO', 'Creating Windows service...') }}
$serviceName = "CustomIntegration"
$binaryPath = "$installDir\custom-integration\custom-integration.exe"

try {
    New-Service -Name $serviceName -BinaryPathName $binaryPath -StartupType Automatic
} catch {
    {{ handle_error('Failed to create service: $_') }}
}

# Start service
{{ log_message('INFO', 'Starting custom integration service...') }}
try {
    Start-Service $serviceName
} catch {
    {{ handle_error('Failed to start service: $_') }}
}

# Verify installation
{{ log_message('INFO', 'Verifying installation...') }}
try {
    $service = Get-Service $serviceName
    if ($service.Status -ne "Running") {
        {{ handle_error('Service is not running') }}
    }
} catch {
    {{ handle_error('Failed to verify service status: $_') }}
}

{{ log_message('INFO', 'Custom integration installation completed successfully') }} 