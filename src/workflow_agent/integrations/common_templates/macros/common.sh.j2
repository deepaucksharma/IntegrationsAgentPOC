# Common utility functions and macros

{# Common logging macro #}
{% macro log_message(level, message) -%}
echo "[$(date '+%Y-%m-%d %H:%M:%S')] [{{ level }}] {{ message }}"
{%- endmacro %}

{# Error handling macro #}
{% macro handle_error(message) -%}
{{ log_message('ERROR', message) }}
exit 1
{%- endmacro %}

{# Common shell script macros #}
{% macro setup_logging() %}
# Set up logging
LOG_FILE="/var/log/integration_install.log"
exec 1> >(tee -a "$LOG_FILE")
exec 2>&1

log() {
    {{ log_message('INFO', '$1') }}
}

log_info() {
    {{ log_message('INFO', '$1') }}
}

log_error() {
    {{ log_message('ERROR', '$1') }} >&2
}

log_debug() {
    if [ "${DEBUG:-0}" = "1" ]; then
        {{ log_message('DEBUG', '$1') }}
    fi
}
{% endmacro %}

{% macro error_handling() %}
# Error handling
set -e
trap '{{ log_message('ERROR', 'Command failed with exit code $? at line $LINENO') }}' ERR
{% endmacro %}

{% macro check_prerequisites() %}
# Check prerequisites
check_command() {
    if ! command -v "$1" >/dev/null 2>&1; then
        {{ handle_error('Required command not found: $1') }}
        return 1
    fi
}

# Check if required tools are available
{% for tool in template_data.required_tools | default([]) %}
if ! command -v {{ tool }} &> /dev/null; then
    {{ handle_error(tool + ' is required but not found') }}
fi
{% endfor %}
{% endmacro %}

{% macro check_command(cmd) %}
if ! command -v {{ cmd }} >/dev/null 2>&1; then
    {{ handle_error('Required command not found: ' + cmd) }}
fi
{% endmacro %}

{% macro check_file(path) %}
if [ ! -f "{{ path }}" ]; then
    {{ handle_error('Required file not found: ' + path) }}
fi
{% endmacro %}

{% macro check_directory(path) %}
if [ ! -d "{{ path }}" ]; then
    {{ handle_error('Required directory not found: ' + path) }}
fi
{% endmacro %}

{% macro backup_file(path) %}
if [ -f "{{ path }}" ]; then
    cp "{{ path }}" "{{ path }}.bak.$(date +%Y%m%d_%H%M%S)"
    {{ log_message('INFO', 'Created backup: ' + path + '.bak') }}
fi
{% endmacro %}

{% macro restore_file(path) %}
if [ -f "{{ path }}.bak" ]; then
    mv "{{ path }}.bak" "{{ path }}"
    {{ log_message('INFO', 'Restored backup: ' + path) }}
fi
{% endmacro %}

{% macro cleanup() %}
# Cleanup temporary files
if [ -d "${TEMP_DIR}" ]; then
    rm -rf "${TEMP_DIR}"
    {{ log_message('INFO', 'Cleaned up temporary directory') }}
fi
{% endmacro %}