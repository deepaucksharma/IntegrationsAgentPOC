# Infrastructure Agent Installation Script for Windows
# Generated by New Relic Integration Agent

# Set error handling
$ErrorActionPreference = "Stop"
$ProgressPreference = "SilentlyContinue"

# Define logging functions
function Write-Log {
    param(
        [string]$Level,
        [string]$Message
    )
    $timestamp = Get-Date -Format "yyyy-MM-dd HH:mm:ss"
    Write-Host "[$timestamp] $Level - $Message"
}

function Write-Error {
    param([string]$Message)
    Write-Log -Level "ERROR" -Message $Message
    throw $Message
}

Write-Log -Level "INFO" -Message "Starting installation of {{ target_name }}"

# Verify prerequisites
Write-Log -Level "INFO" -Message "Verifying prerequisites..."
{% if template_data.required_tools %}
{% for tool in template_data.required_tools %}
try {
    if (-not (Get-Command {{ tool }} -ErrorAction SilentlyContinue)) {
        Write-Error "Required tool not found: {{ tool }}"
    }
} catch {
    Write-Error "Error checking for required tool: {{ tool }}"
}
{% endfor %}
{% endif %}

# Create installation directory
$installDir = "C:\Program Files\New Relic\newrelic-infra"
if (-not (Test-Path $installDir)) {
    Write-Log -Level "INFO" -Message "Creating installation directory..."
    New-Item -ItemType Directory -Path $installDir -Force | Out-Null
}

# Download agent
Write-Log -Level "INFO" -Message "Downloading New Relic Infrastructure agent..."
$agentUrl = "https://download.newrelic.com/infrastructure_agent/windows/newrelic-infra.msi"
$installerPath = "$env:TEMP\newrelic-infra.msi"
try {
    Invoke-WebRequest -Uri $agentUrl -OutFile $installerPath
} catch {
    Write-Error "Failed to download agent: $_"
}

# Install agent
Write-Log -Level "INFO" -Message "Installing New Relic Infrastructure agent..."
try {
    Start-Process msiexec.exe -ArgumentList "/i $installerPath /qn" -Wait
} catch {
    Write-Error "Failed to install agent: $_"
}

# Configure agent
Write-Log -Level "INFO" -Message "Configuring agent..."
$configPath = "$installDir\newrelic-infra.yml"
$configContent = @"
license_key: {{ parameters.license_key }}
{% if parameters.host %}
custom_attributes:
  host: {{ parameters.host }}
{% endif %}
{% if parameters.port %}
  port: {{ parameters.port }}
{% endif %}
{% if parameters.log_level %}
log:
  level: {{ parameters.log_level }}
{% endif %}
"@

try {
    $configContent | Out-File -FilePath $configPath -Encoding UTF8
} catch {
    Write-Error "Failed to create config file: $_"
}

# Start service
Write-Log -Level "INFO" -Message "Starting New Relic Infrastructure service..."
try {
    Start-Service "newrelic-infra"
} catch {
    Write-Error "Failed to start service: $_"
}

# Verify installation
Write-Log -Level "INFO" -Message "Verifying installation..."
{% if template_data.verification and template_data.verification.steps %}
{% for step in template_data.verification.steps %}
try {
    {{ step }}
    if ($LASTEXITCODE -ne 0) {
        Write-Error "Verification step failed: {{ step }}"
    }
} catch {
    Write-Error "Verification failed: {{ step }}"
}
{% endfor %}
{% endif %}

# Check version if specified
{% if template_data.version %}
Write-Log -Level "INFO" -Message "Checking installed version..."
try {
    $installed_version = {{ template_data.version_command }}
    if (-not ($installed_version -like "*{{ template_data.version }}*")) {
        Write-Error "Version mismatch. Expected: {{ template_data.version }}, Got: $installed_version"
    }
} catch {
    Write-Error "Failed to check version"
}
{% endif %}

Write-Log -Level "INFO" -Message "Installation of {{ target_name }} completed successfully" 